generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

datasource db {
  provider  = "postgresql"
  url       = env("NEON_DATABASE_URL") // uses connection pooling
  directUrl = env("NEON_DIRECT_URL") // uses a direct connection
}

model Topic {
  id          String   @id @default(cuid())
  name        String   @unique @db.VarChar(128)
  description String?  @db.VarChar(512)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  urls        Url[]
}

model Url {
  id          Int      @id @default(autoincrement())
  icon        String?  @db.VarChar(128)
  url         String?  @db.VarChar(128)
  github      String?  @db.VarChar(128)
  title       String   @db.VarChar(128)
  tags        String[] @db.VarChar(128)
  description String?  @db.VarChar(512)
  topic       Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// #region authjs
// https://authjs.dev/getting-started/adapters/prisma#schema

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role          UserRole  @default(USER)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// #endregion
